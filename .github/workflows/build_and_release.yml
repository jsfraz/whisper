name: Build and Release Flutter App

on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Java
        uses: actions/setup-java@v2
        with:
          distribution: 'zulu'
          java-version: '21'

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          channel: 'stable'

      - name: Get dependencies
        run: flutter pub get

      # Creating Firebase configuration files from base64 encoded secret keys
      - name: Create Firebase configuration files
        run: |
          if [ -n "${{ secrets.FIREBASE_JSON_BASE64 }}" ]; then
            echo "${{ secrets.FIREBASE_JSON_BASE64 }}" | base64 -d > firebase.json
          else
            echo "Error: FIREBASE_JSON_BASE64 secret is required"
            exit 1
          fi
          
          if [ -n "${{ secrets.FIREBASE_OPTIONS_DART_BASE64 }}" ]; then
            echo "${{ secrets.FIREBASE_OPTIONS_DART_BASE64 }}" | base64 -d > lib/firebase_options.dart
          else
            echo "Error: FIREBASE_OPTIONS_DART_BASE64 secret is required"
            exit 1
          fi
          
          if [ -n "${{ secrets.GOOGLE_SERVICES_JSON_BASE64 }}" ]; then
            echo "${{ secrets.GOOGLE_SERVICES_JSON_BASE64 }}" | base64 -d > android/app/google-services.json
          else
            echo "Error: GOOGLE_SERVICES_JSON_BASE64 secret is required"
            exit 1
          fi
          
          # if [ -n "${{ secrets.GOOGLE_SERVICE_INFO_PLIST_BASE64 }}" ]; then
          #  echo "${{ secrets.GOOGLE_SERVICE_INFO_PLIST_BASE64 }}" | base64 -d > ios/Runner/GoogleService-Info.plist
          #else
          #  echo "Error: GOOGLE_SERVICE_INFO_PLIST_BASE64 secret is required"
          #  exit 1
          #fi

      # Building Android APK
      - name: Build Android APK
        run: flutter build apk --release

      # Getting version from pubspec.yaml for release name
      - name: Get version
        id: version
        run: |
          VERSION=$(grep 'version:' pubspec.yaml | sed 's/version: //' | tr -d '[:space:]')
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      # Rename APK file
      - name: Rename APK
        run: |
          mv build/app/outputs/flutter-apk/app-release.apk build/app/outputs/flutter-apk/whisper_v${{ steps.version.outputs.version }}.apk

      # Creating GitHub release
      - name: Create Release
        id: create_release
        uses: softprops/action-gh-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ steps.version.outputs.version }}
          name: Release v${{ steps.version.outputs.version }}
          draft: false
          prerelease: false
          files: |
            build/app/outputs/flutter-apk/whisper_v${{ steps.version.outputs.version }}.apk